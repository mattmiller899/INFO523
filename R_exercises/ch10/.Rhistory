#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- college_clean %>% dplyr::select(name,pam_fit.cluster)
View(result1)
gower_dist
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- college_clean %>% dplyr::select(name,pam_fit.cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_fit <- pam(gower_dist, diss = TRUE, k = 2)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_fit <- pam(gower_dist, diss = TRUE, k = 2)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_fit <- pam(gower_dist, diss = TRUE, k = 2)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering),
+          name = df$country)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>%
filter(X > 2.5 & X < 5,
Y > -8 & Y < -4) %>%
left_join(df, by = "country") %>%
collect %>%
.[["name"]]
tsne_data %>%
filter(X > 2.5 & X < 5,
Y > -8 & Y < -4) %>%
left_join(df, by = "country") %>% collect %>% .[["name"]]
tsne_data %>%
filter(X > 2.5 & X < 5, Y > -8 & Y < -4)
tsne_data %>%
filter(X > 2.5 & X < 5, Y > -8 & Y < -4) %>%
left_join(df, by = "country") %>% collect %>% .[["country"]]
h <- hclust(gower_dist, method="average")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
#If we want three clusters
clus3 <- cutree(h, 3)
clus3
gower_dist <- daisy(df[, -1], metric = "gower", type = list(logratio = 3))
summary(gower_dist)
gower_mat <- as.matrix(gower_dist)
# Use PAM (partitioning around medoids) to perform the clustering
# Calculate Silhouette width for 2 to 10 clusters using PAM
sil <- c(NA)
for(i in 2:10){
pam_fit <- pam(gower_mat, diss=TRUE, k=i)
sil[i] <-pam_fit$silinfo$avg.width }
plot(1:10, sil,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:10, sil)
pam_fit <- pam(gower_dist, diss = TRUE, k = 2)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
View(result1)
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data
tsne_data %>% select(cluster = 1)
tsne_data %>% select(cluster = 1) %>% select(name)
tsne_data %>% select(cluster = 1) %>% select(country)
tsne_data %>% select(cluster = 1) %>% country
tsne_data %>% select(cluster = 1)
tsne_data
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 4)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>% select(cluster == 1)
tsne_data
result1 %>% arrange()
result1 %>% arrange(desc(pam_fit.cluster))
?desc
result1 %>% arrange(pam_fit.cluster)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
View(result1)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
h <- hclust(gower_dist, method="average")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
h
View(h)
#If we want three clusters
clus3 <- cutree(h, 3)
clus3
#If we want three clusters
clus3 <- cutree(h, 3)
clus3
table(result1$pam_fit.cluster, clus3)
df
View(df)
View(df[, -1])
#If we want three clusters
clus3 <- cutree(h, 3)
clus3
table(result1$pam_fit.cluster, clus3)
#If we want three clusters
clus3 <- cutree(h, 4)
clus3
table(result1$pam_fit.cluster, clus3)
h <- hclust(gower_dist, method="ward.D")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
h <- hclust(gower_dist, method="single")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
h <- hclust(gower_dist, method="complete")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
#If we want three clusters
clus3 <- cutree(h, 3)
clus3
table(result1$pam_fit.cluster, clus3)
clus3 <- cutree(h, 4)
table(result1$pam_fit.cluster, clus4)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
clus4 <- cutree(h, 4)
table(result1$pam_fit.cluster, clus4)
library('dplyr')
library('tidyverse')
library('tidyverse')
library(cluster) # for gower similarity, pam, and diana (a divisive hierarchical method). clara() is also included, which is basically pam by sampling
library(Rtsne) # for t-SNE plot
library(ggplot2) # for visualization
#1800-2013
gdp = read.csv("data/gdp_total_ppp.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
child_mortality = read.csv("data/child_mortality_0_5_year_olds_dying_per_1000_born.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
children_per_woman = read.csv("data/children_per_woman_total_fertility.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2014
co2_emissions = read.csv("data/co2_emissions_tonnes_per_person.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
gini = read.csv("data/gini.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
income_per_person = read.csv("data/income_per_person_gdppercapita_ppp_inflation_adjusted.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
life_expectancy = read.csv("data/life_expectancy_years.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1970-2015 #could cut
women_years_school = read.csv("data/mean_years_in_school_women_15_to_24_years.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1960-2008 #could cut
res_electricity = read.csv("data/residential_electricity_use_total.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
## Gather as long table
child_mortality_table = child_mortality %>% gather(key = 'year', value = 'child_mortality', -country)
children_per_woman_table = children_per_woman %>% gather(key = 'year', value = 'children_per_woman', -country)
co2_emissions_table = co2_emissions %>% gather(key = 'year', value = 'co2_emissions', -country)
gdp_table = gdp %>% gather(key = 'year', value = 'gdp', -country)
gini_table = gini %>% gather(key = 'year', value = 'gini', -country)
income_table  = income_per_person %>% gather(key = 'income_per_person', value = 'adults_hiv', -country)
life_expectancy_table = life_expectancy %>% gather(key = 'year', value = 'life_expectancy', -country)
women_years_school_table = women_years_school %>% gather(key = 'year', value = 'women_years_school', -country)
res_electricity_table = res_electricity %>% gather(key = 'year', value = 'res_electricity', -country)
# Join tables # could also do with left_joins instead of full_joins to get rid of some NA's.
total_data = full_join(gdp_table, child_mortality_table, by = c('country','year'))
total_data = full_join(children_per_woman_table, total_data, by = c('country','year'))
total_data = full_join(co2_emissions_table, total_data, by = c('country','year'))
total_data = full_join(gini_table, total_data, by = c('country','year'))
total_data = full_join(income_table, total_data, by = c('country','year'))
total_data = full_join(life_expectancy_table, total_data, by = c('country','year'))
total_data = full_join(women_years_school_table, total_data, by = c('country','year'))
total_data = full_join(res_electricity_table, total_data, by = c('country','year'))
# Make Trimmed version of data by dropping all rows with NA's.
data_trimmed = drop_na(total_data)
# make country a factor
data_trimmed$country <- as.factor(data_trimmed$country)
# make year as numeric
data_trimmed$year <- as.numeric(data_trimmed$year)
#1970 and 2008 work nicely
df = total_data  %>%  group_by(country) %>% filter(year == 2008 )
df = drop_na(df)
df = subset(df, select = -year)
# Calculate distance among the observations
# using the gower distance
gower_dist <- daisy(df[, -1], metric = "gower", type = list(logratio = 3))
summary(gower_dist)
gower_mat <- as.matrix(gower_dist)
# Use PAM (partitioning around medoids) to perform the clustering
# Calculate Silhouette width for 2 to 10 clusters using PAM
sil <- c(NA)
for(i in 2:10){
pam_fit <- pam(gower_mat, diss=TRUE, k=i)
sil[i] <-pam_fit$silinfo$avg.width }
# Plot silhouette width
plot(1:10, sil,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:10, sil)
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>% select(cluster = 1)
result1 %>% arrange(pam_fit.cluster)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
pam_results$the_summary
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 2)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>% select(cluster = 1)
result1 %>% arrange(pam_fit.cluster)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
clus2 <- cutree(h, 2)
table(result1$pam_fit.cluster, clus2)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
clus4 <- cutree(h, 4)
table(result1$pam_fit.cluster, clus4)
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>% select(cluster = 1)
result1 %>% arrange(pam_fit.cluster)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
clus2 <- cutree(h, 2)
table(result1$pam_fit.cluster, clus2)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
clus4 <- cutree(h, 4)
table(result1$pam_fit.cluster, clus4)
View(result1)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
install.packages('dplyr')
library('dplyr')
install.packages('tidyverse')
library('tidyverse')
library(cluster) # for gower similarity, pam, and diana (a divisive hierarchical method). clara() is also included, which is basically pam by sampling
install.packages("tidyverse")
library('dplyr')
library('tidyverse')
library(cluster) # for gower similarity, pam, and diana (a divisive hierarchical method). clara() is also included, which is basically pam by sampling
library(Rtsne) # for t-SNE plot
library(ggplot2) # for visualization
#1800-2013
gdp = read.csv("data/gdp_total_ppp.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
child_mortality = read.csv("data/child_mortality_0_5_year_olds_dying_per_1000_born.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
children_per_woman = read.csv("data/children_per_woman_total_fertility.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2014
co2_emissions = read.csv("data/co2_emissions_tonnes_per_person.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
gini = read.csv("data/gini.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
income_per_person = read.csv("data/income_per_person_gdppercapita_ppp_inflation_adjusted.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1800-2018
life_expectancy = read.csv("data/life_expectancy_years.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1970-2015 #could cut
women_years_school = read.csv("data/mean_years_in_school_women_15_to_24_years.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
#1960-2008 #could cut
res_electricity = read.csv("data/residential_electricity_use_total.csv", header = TRUE, check.names = FALSE, encoding="UTF-8")
## Gather as long table
child_mortality_table = child_mortality %>% gather(key = 'year', value = 'child_mortality', -country)
children_per_woman_table = children_per_woman %>% gather(key = 'year', value = 'children_per_woman', -country)
co2_emissions_table = co2_emissions %>% gather(key = 'year', value = 'co2_emissions', -country)
gdp_table = gdp %>% gather(key = 'year', value = 'gdp', -country)
gini_table = gini %>% gather(key = 'year', value = 'gini', -country)
income_table  = income_per_person %>% gather(key = 'income_per_person', value = 'adults_hiv', -country)
life_expectancy_table = life_expectancy %>% gather(key = 'year', value = 'life_expectancy', -country)
women_years_school_table = women_years_school %>% gather(key = 'year', value = 'women_years_school', -country)
res_electricity_table = res_electricity %>% gather(key = 'year', value = 'res_electricity', -country)
# Join tables # could also do with left_joins instead of full_joins to get rid of some NA's.
total_data = full_join(gdp_table, child_mortality_table, by = c('country','year'))
total_data = full_join(children_per_woman_table, total_data, by = c('country','year'))
total_data = full_join(co2_emissions_table, total_data, by = c('country','year'))
total_data = full_join(gini_table, total_data, by = c('country','year'))
total_data = full_join(income_table, total_data, by = c('country','year'))
total_data = full_join(life_expectancy_table, total_data, by = c('country','year'))
total_data = full_join(women_years_school_table, total_data, by = c('country','year'))
total_data = full_join(res_electricity_table, total_data, by = c('country','year'))
# Make Trimmed version of data by dropping all rows with NA's.
data_trimmed = drop_na(total_data)
# make country a factor
data_trimmed$country <- as.factor(data_trimmed$country)
# make year as numeric
data_trimmed$year <- as.numeric(data_trimmed$year)
#1970 and 2008 work nicely
df = total_data  %>%  group_by(country) %>% filter(year == 2008 )
df = drop_na(df)
df = subset(df, select = -year)
# Calculate distance among the observations
# using the gower distance
gower_dist <- daisy(df[, -1], metric = "gower", type = list(logratio = 3))
summary(gower_dist)
gower_mat <- as.matrix(gower_dist)
# Use PAM (partitioning around medoids) to perform the clustering
# Calculate Silhouette width for 2 to 10 clusters using PAM
sil <- c(NA)
for(i in 2:10){
pam_fit <- pam(gower_mat, diss=TRUE, k=i)
sil[i] <-pam_fit$silinfo$avg.width }
# Plot silhouette width
plot(1:10, sil,
xlab = "Number of clusters",
ylab = "Silhouette Width")
lines(1:10, sil)
#Cluster Interpretation:via Descriptive Statistics
pam_fit <- pam(gower_dist, diss = TRUE, k = 3)
#add cluster labels to the data. We will use result1 later
df <- data.frame(df, pam_fit$cluster)
#show clustering results by college
result1 <- df %>% dplyr::select(country,pam_fit.cluster)
#group_by cluster and then compute the summary data (means, median, etc) for each cluster
pam_results <- df %>%
dplyr::select(-country) %>%
mutate(cluster = pam_fit$clustering) %>% #add the cluster column
group_by(cluster) %>% #group universities by its cluster
do(the_summary = summary(.)) #do: summarize by group/cluster,add the_summary column
pam_results$the_summary
tsne_obj <- Rtsne(gower_dist, is_distance = TRUE)
tsne_data <- tsne_obj$Y %>%
data.frame() %>%
setNames(c("X", "Y")) %>%
mutate(cluster = factor(pam_fit$clustering), name = df$country)
ggplot(aes(x = X, y = Y), data = tsne_data) +
geom_point(aes(color = cluster))
tsne_data %>% select(cluster = 1)
result1 %>% arrange(pam_fit.cluster)
h <- hclust(gower_dist, method="ward.D2")
#plot the dendrogram, #hang decides where to start labels on axis. -0.1 is negative, so the x-axis labels will hang down from 0
plot(h, hang=-0.1)
clus2 <- cutree(h, 2)
table(result1$pam_fit.cluster, clus2)
#If we want three clusters
clus3 <- cutree(h, 3)
table(result1$pam_fit.cluster, clus3)
clus4 <- cutree(h, 4)
table(result1$pam_fit.cluster, clus4)
?logratio
